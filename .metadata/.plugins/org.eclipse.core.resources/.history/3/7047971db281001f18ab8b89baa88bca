/*
 * input_reading.c
 *
 *  Created on: Sep 30, 2024
 *      Author: User
 */

#include "main.h"
#include "input_reading.h"
#include "led7.h"
#include "timer.h"
#include "led_display.h"
//we aim to work with more than one buttons
#define N0_OF_BUTTONS 	1
//timer interrupt duration is 10ms, so to pass 1 second,
//we need to jump to the interrupt service routine 100 time
#define DURATION_FOR_AUTO_INCREASING 	100
#define BUTTON_IS_PRESSED 		GPIO_PIN_RESET
#define BUTTON_IS_RELEASED 		GPIO_PIN_SET
//the buffer that the final result is stored after
//debouncing
static GPIO_PinState buttonBuffer[N0_OF_BUTTONS];
//we define two buffers for debouncing
static GPIO_PinState debounceButtonBuffer1[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];
//we define a flag for a button pressed more than 1 second.
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(void){
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
			buttonBuffer[i] = debounceButtonBuffer1[i];
		if(buttonBuffer[i] == BUTTON_IS_PRESSED){
			//if a button is pressed, we start counting
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);

			if(counterForButtonPress1s[i] <	DURATION_FOR_AUTO_INCREASING){
				counterForButtonPress1s[i]++;
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,1);
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
				//todo
				//led_red_blink();
				if (timer_flag[1] == 1){
					led_red_blink();
					setTimer(1,500);
				}
				//display2number(1,20);
				if (timer_flag[2] == 1){
					display2number(1,20);
				 	setTimer(2,1000);
				}
				//HAL_Delay(500);
			}
		} else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);

			counterForButtonPress1s[i] = 0;
			flagForButtonPress1s[i] = 0;
		}
	}
}

unsigned char is_button_pressed(uint8_t index){ //Checking a button is pressed or not
	 if(index >= N0_OF_BUTTONS) return 0;
	 return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 }
 unsigned char is_button_pressed_1s(unsigned char index){ //Checking a button is pressed more than a second or not
	 if(index >= N0_OF_BUTTONS) return 0xff;
	 return (flagForButtonPress1s[index] == 1);
 }
