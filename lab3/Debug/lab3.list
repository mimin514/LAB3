
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002154  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002260  08002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002284  08002284  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002284  08002284  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002284  08002284  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002288  08002288  00012288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800228c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000024  080022b0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080022b0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084e8  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a7  00000000  00000000  00028535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000012c1  00000000  00000000  0002ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e55  00000000  00000000  0002c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821be  00000000  00000000  00035f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b80ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b8  00000000  00000000  000b813c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002248 	.word	0x08002248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002248 	.word	0x08002248

0800014c <display1>:
 */
#include "led7.h"
#include "input_reading.h"
#include "main.h"
#define SETNUM 8
void display1(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (num){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display1+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display1+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b5      	ldr	r0, [pc, #724]	; (8000468 <display1+0x31c>)
 8000192:	f001 f85b 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b3      	ldr	r0, [pc, #716]	; (8000468 <display1+0x31c>)
 800019c:	f001 f856 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48b0      	ldr	r0, [pc, #704]	; (8000468 <display1+0x31c>)
 80001a6:	f001 f851 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ae      	ldr	r0, [pc, #696]	; (8000468 <display1+0x31c>)
 80001b0:	f001 f84c 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48ab      	ldr	r0, [pc, #684]	; (8000468 <display1+0x31c>)
 80001ba:	f001 f847 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a9      	ldr	r0, [pc, #676]	; (8000468 <display1+0x31c>)
 80001c4:	f001 f842 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a6      	ldr	r0, [pc, #664]	; (8000468 <display1+0x31c>)
 80001ce:	f001 f83d 	bl	800124c <HAL_GPIO_WritePin>
		break;
 80001d2:	e144      	b.n	800045e <display1+0x312>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a3      	ldr	r0, [pc, #652]	; (8000468 <display1+0x31c>)
 80001da:	f001 f837 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 80001de:	2201      	movs	r2, #1
 80001e0:	2108      	movs	r1, #8
 80001e2:	48a1      	ldr	r0, [pc, #644]	; (8000468 <display1+0x31c>)
 80001e4:	f001 f832 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2110      	movs	r1, #16
 80001ec:	489e      	ldr	r0, [pc, #632]	; (8000468 <display1+0x31c>)
 80001ee:	f001 f82d 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2120      	movs	r1, #32
 80001f6:	489c      	ldr	r0, [pc, #624]	; (8000468 <display1+0x31c>)
 80001f8:	f001 f828 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2140      	movs	r1, #64	; 0x40
 8000200:	4899      	ldr	r0, [pc, #612]	; (8000468 <display1+0x31c>)
 8000202:	f001 f823 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2102      	movs	r1, #2
 800020a:	4897      	ldr	r0, [pc, #604]	; (8000468 <display1+0x31c>)
 800020c:	f001 f81e 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	2104      	movs	r1, #4
 8000214:	4894      	ldr	r0, [pc, #592]	; (8000468 <display1+0x31c>)
 8000216:	f001 f819 	bl	800124c <HAL_GPIO_WritePin>
			break;
 800021a:	e120      	b.n	800045e <display1+0x312>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4891      	ldr	r0, [pc, #580]	; (8000468 <display1+0x31c>)
 8000222:	f001 f813 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488f      	ldr	r0, [pc, #572]	; (8000468 <display1+0x31c>)
 800022c:	f001 f80e 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 1);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488c      	ldr	r0, [pc, #560]	; (8000468 <display1+0x31c>)
 8000236:	f001 f809 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	488a      	ldr	r0, [pc, #552]	; (8000468 <display1+0x31c>)
 8000240:	f001 f804 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4887      	ldr	r0, [pc, #540]	; (8000468 <display1+0x31c>)
 800024a:	f000 ffff 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4885      	ldr	r0, [pc, #532]	; (8000468 <display1+0x31c>)
 8000254:	f000 fffa 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4882      	ldr	r0, [pc, #520]	; (8000468 <display1+0x31c>)
 800025e:	f000 fff5 	bl	800124c <HAL_GPIO_WritePin>
			break;
 8000262:	e0fc      	b.n	800045e <display1+0x312>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487f      	ldr	r0, [pc, #508]	; (8000468 <display1+0x31c>)
 800026a:	f000 ffef 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487d      	ldr	r0, [pc, #500]	; (8000468 <display1+0x31c>)
 8000274:	f000 ffea 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	487a      	ldr	r0, [pc, #488]	; (8000468 <display1+0x31c>)
 800027e:	f000 ffe5 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4878      	ldr	r0, [pc, #480]	; (8000468 <display1+0x31c>)
 8000288:	f000 ffe0 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4875      	ldr	r0, [pc, #468]	; (8000468 <display1+0x31c>)
 8000292:	f000 ffdb 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4873      	ldr	r0, [pc, #460]	; (8000468 <display1+0x31c>)
 800029c:	f000 ffd6 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	4870      	ldr	r0, [pc, #448]	; (8000468 <display1+0x31c>)
 80002a6:	f000 ffd1 	bl	800124c <HAL_GPIO_WritePin>
			break;
 80002aa:	e0d8      	b.n	800045e <display1+0x312>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486d      	ldr	r0, [pc, #436]	; (8000468 <display1+0x31c>)
 80002b2:	f000 ffcb 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486b      	ldr	r0, [pc, #428]	; (8000468 <display1+0x31c>)
 80002bc:	f000 ffc6 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4868      	ldr	r0, [pc, #416]	; (8000468 <display1+0x31c>)
 80002c6:	f000 ffc1 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4866      	ldr	r0, [pc, #408]	; (8000468 <display1+0x31c>)
 80002d0:	f000 ffbc 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4863      	ldr	r0, [pc, #396]	; (8000468 <display1+0x31c>)
 80002da:	f000 ffb7 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4861      	ldr	r0, [pc, #388]	; (8000468 <display1+0x31c>)
 80002e4:	f000 ffb2 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485e      	ldr	r0, [pc, #376]	; (8000468 <display1+0x31c>)
 80002ee:	f000 ffad 	bl	800124c <HAL_GPIO_WritePin>
			break;
 80002f2:	e0b4      	b.n	800045e <display1+0x312>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485b      	ldr	r0, [pc, #364]	; (8000468 <display1+0x31c>)
 80002fa:	f000 ffa7 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 1);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4859      	ldr	r0, [pc, #356]	; (8000468 <display1+0x31c>)
 8000304:	f000 ffa2 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4856      	ldr	r0, [pc, #344]	; (8000468 <display1+0x31c>)
 800030e:	f000 ff9d 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4854      	ldr	r0, [pc, #336]	; (8000468 <display1+0x31c>)
 8000318:	f000 ff98 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4851      	ldr	r0, [pc, #324]	; (8000468 <display1+0x31c>)
 8000322:	f000 ff93 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484f      	ldr	r0, [pc, #316]	; (8000468 <display1+0x31c>)
 800032c:	f000 ff8e 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484c      	ldr	r0, [pc, #304]	; (8000468 <display1+0x31c>)
 8000336:	f000 ff89 	bl	800124c <HAL_GPIO_WritePin>
			break;
 800033a:	e090      	b.n	800045e <display1+0x312>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4849      	ldr	r0, [pc, #292]	; (8000468 <display1+0x31c>)
 8000342:	f000 ff83 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 1);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4847      	ldr	r0, [pc, #284]	; (8000468 <display1+0x31c>)
 800034c:	f000 ff7e 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4844      	ldr	r0, [pc, #272]	; (8000468 <display1+0x31c>)
 8000356:	f000 ff79 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4842      	ldr	r0, [pc, #264]	; (8000468 <display1+0x31c>)
 8000360:	f000 ff74 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483f      	ldr	r0, [pc, #252]	; (8000468 <display1+0x31c>)
 800036a:	f000 ff6f 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483d      	ldr	r0, [pc, #244]	; (8000468 <display1+0x31c>)
 8000374:	f000 ff6a 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	483a      	ldr	r0, [pc, #232]	; (8000468 <display1+0x31c>)
 800037e:	f000 ff65 	bl	800124c <HAL_GPIO_WritePin>
			break;
 8000382:	e06c      	b.n	800045e <display1+0x312>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4837      	ldr	r0, [pc, #220]	; (8000468 <display1+0x31c>)
 800038a:	f000 ff5f 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4835      	ldr	r0, [pc, #212]	; (8000468 <display1+0x31c>)
 8000394:	f000 ff5a 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4832      	ldr	r0, [pc, #200]	; (8000468 <display1+0x31c>)
 800039e:	f000 ff55 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	4830      	ldr	r0, [pc, #192]	; (8000468 <display1+0x31c>)
 80003a8:	f000 ff50 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482d      	ldr	r0, [pc, #180]	; (8000468 <display1+0x31c>)
 80003b2:	f000 ff4b 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482b      	ldr	r0, [pc, #172]	; (8000468 <display1+0x31c>)
 80003bc:	f000 ff46 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4828      	ldr	r0, [pc, #160]	; (8000468 <display1+0x31c>)
 80003c6:	f000 ff41 	bl	800124c <HAL_GPIO_WritePin>
			break;
 80003ca:	e048      	b.n	800045e <display1+0x312>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4825      	ldr	r0, [pc, #148]	; (8000468 <display1+0x31c>)
 80003d2:	f000 ff3b 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4823      	ldr	r0, [pc, #140]	; (8000468 <display1+0x31c>)
 80003dc:	f000 ff36 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	4820      	ldr	r0, [pc, #128]	; (8000468 <display1+0x31c>)
 80003e6:	f000 ff31 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481e      	ldr	r0, [pc, #120]	; (8000468 <display1+0x31c>)
 80003f0:	f000 ff2c 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481b      	ldr	r0, [pc, #108]	; (8000468 <display1+0x31c>)
 80003fa:	f000 ff27 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4819      	ldr	r0, [pc, #100]	; (8000468 <display1+0x31c>)
 8000404:	f000 ff22 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4816      	ldr	r0, [pc, #88]	; (8000468 <display1+0x31c>)
 800040e:	f000 ff1d 	bl	800124c <HAL_GPIO_WritePin>
			break;
 8000412:	e024      	b.n	800045e <display1+0x312>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <display1+0x31c>)
 800041a:	f000 ff17 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <display1+0x31c>)
 8000424:	f000 ff12 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <display1+0x31c>)
 800042e:	f000 ff0d 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <display1+0x31c>)
 8000438:	f000 ff08 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <display1+0x31c>)
 8000442:	f000 ff03 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4807      	ldr	r0, [pc, #28]	; (8000468 <display1+0x31c>)
 800044c:	f000 fefe 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <display1+0x31c>)
 8000456:	f000 fef9 	bl	800124c <HAL_GPIO_WritePin>
			break;
 800045a:	e000      	b.n	800045e <display1+0x312>
	default:
		break;
 800045c:	bf00      	nop
	}
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010800 	.word	0x40010800

0800046c <display2number>:
const uint16_t digit_pins_2[] = { EN2_Pin, EN4_Pin};

int time=12;
uint8_t digit1, digit2,digit3,digit4 ;

void display2number(int num1,int num2){ // ok
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
    digit1 = num1 / 10;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a5f      	ldr	r2, [pc, #380]	; (80005f8 <display2number+0x18c>)
 800047a:	fb82 1203 	smull	r1, r2, r2, r3
 800047e:	1092      	asrs	r2, r2, #2
 8000480:	17db      	asrs	r3, r3, #31
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b5d      	ldr	r3, [pc, #372]	; (80005fc <display2number+0x190>)
 8000488:	701a      	strb	r2, [r3, #0]
    digit2 = num1 % 10;
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	4b5a      	ldr	r3, [pc, #360]	; (80005f8 <display2number+0x18c>)
 800048e:	fb83 1302 	smull	r1, r3, r3, r2
 8000492:	1099      	asrs	r1, r3, #2
 8000494:	17d3      	asrs	r3, r2, #31
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	460b      	mov	r3, r1
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	440b      	add	r3, r1
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	1ad1      	subs	r1, r2, r3
 80004a2:	b2ca      	uxtb	r2, r1
 80004a4:	4b56      	ldr	r3, [pc, #344]	; (8000600 <display2number+0x194>)
 80004a6:	701a      	strb	r2, [r3, #0]
    digit3 = num2 / 10;
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	4a53      	ldr	r2, [pc, #332]	; (80005f8 <display2number+0x18c>)
 80004ac:	fb82 1203 	smull	r1, r2, r2, r3
 80004b0:	1092      	asrs	r2, r2, #2
 80004b2:	17db      	asrs	r3, r3, #31
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <display2number+0x198>)
 80004ba:	701a      	strb	r2, [r3, #0]
    digit4 = num2 % 10;
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	4b4e      	ldr	r3, [pc, #312]	; (80005f8 <display2number+0x18c>)
 80004c0:	fb83 1302 	smull	r1, r3, r3, r2
 80004c4:	1099      	asrs	r1, r3, #2
 80004c6:	17d3      	asrs	r3, r2, #31
 80004c8:	1ac9      	subs	r1, r1, r3
 80004ca:	460b      	mov	r3, r1
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	440b      	add	r3, r1
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	1ad1      	subs	r1, r2, r3
 80004d4:	b2ca      	uxtb	r2, r1
 80004d6:	4b4c      	ldr	r3, [pc, #304]	; (8000608 <display2number+0x19c>)
 80004d8:	701a      	strb	r2, [r3, #0]
    if (num1 < 10) digit1 = 0;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b09      	cmp	r3, #9
 80004de:	dc02      	bgt.n	80004e6 <display2number+0x7a>
 80004e0:	4b46      	ldr	r3, [pc, #280]	; (80005fc <display2number+0x190>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
        if (num2 < 10) digit3 = 0;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	2b09      	cmp	r3, #9
 80004ea:	dc02      	bgt.n	80004f2 <display2number+0x86>
 80004ec:	4b45      	ldr	r3, [pc, #276]	; (8000604 <display2number+0x198>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, digit_pins_1[0], GPIO_PIN_RESET);
 80004f2:	2308      	movs	r3, #8
 80004f4:	2200      	movs	r2, #0
 80004f6:	4619      	mov	r1, r3
 80004f8:	4844      	ldr	r0, [pc, #272]	; (800060c <display2number+0x1a0>)
 80004fa:	f000 fea7 	bl	800124c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, digit_pins_2[0], GPIO_PIN_RESET);
 80004fe:	2310      	movs	r3, #16
 8000500:	2200      	movs	r2, #0
 8000502:	4619      	mov	r1, r3
 8000504:	4841      	ldr	r0, [pc, #260]	; (800060c <display2number+0x1a0>)
 8000506:	f000 fea1 	bl	800124c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, digit_pins_1[1], GPIO_PIN_RESET);
 800050a:	2320      	movs	r3, #32
 800050c:	2200      	movs	r2, #0
 800050e:	4619      	mov	r1, r3
 8000510:	483e      	ldr	r0, [pc, #248]	; (800060c <display2number+0x1a0>)
 8000512:	f000 fe9b 	bl	800124c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, digit_pins_2[1], GPIO_PIN_RESET);
 8000516:	2340      	movs	r3, #64	; 0x40
 8000518:	2200      	movs	r2, #0
 800051a:	4619      	mov	r1, r3
 800051c:	483b      	ldr	r0, [pc, #236]	; (800060c <display2number+0x1a0>)
 800051e:	f000 fe95 	bl	800124c <HAL_GPIO_WritePin>
    switch (digit_index){
 8000522:	4b3b      	ldr	r3, [pc, #236]	; (8000610 <display2number+0x1a4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3b01      	subs	r3, #1
 8000528:	2b03      	cmp	r3, #3
 800052a:	d853      	bhi.n	80005d4 <display2number+0x168>
 800052c:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <display2number+0xc8>)
 800052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000532:	bf00      	nop
 8000534:	08000545 	.word	0x08000545
 8000538:	08000569 	.word	0x08000569
 800053c:	0800058d 	.word	0x0800058d
 8000540:	080005b1 	.word	0x080005b1
    case 1:
		HAL_GPIO_WritePin(GPIOB, digit_pins_2[0], GPIO_PIN_RESET);
 8000544:	2310      	movs	r3, #16
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	4830      	ldr	r0, [pc, #192]	; (800060c <display2number+0x1a0>)
 800054c:	f000 fe7e 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, digit_pins_1[0], GPIO_PIN_SET);
 8000550:	2308      	movs	r3, #8
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	482d      	ldr	r0, [pc, #180]	; (800060c <display2number+0x1a0>)
 8000558:	f000 fe78 	bl	800124c <HAL_GPIO_WritePin>
		display1(digit1);
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <display2number+0x190>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fdf3 	bl	800014c <display1>
    	break;
 8000566:	e036      	b.n	80005d6 <display2number+0x16a>
    case 2:
		HAL_GPIO_WritePin(GPIOB, digit_pins_1[0], GPIO_PIN_RESET);
 8000568:	2308      	movs	r3, #8
 800056a:	2200      	movs	r2, #0
 800056c:	4619      	mov	r1, r3
 800056e:	4827      	ldr	r0, [pc, #156]	; (800060c <display2number+0x1a0>)
 8000570:	f000 fe6c 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, digit_pins_2[0], GPIO_PIN_SET);
 8000574:	2310      	movs	r3, #16
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	4824      	ldr	r0, [pc, #144]	; (800060c <display2number+0x1a0>)
 800057c:	f000 fe66 	bl	800124c <HAL_GPIO_WritePin>
		display1(digit2);
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <display2number+0x194>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fde1 	bl	800014c <display1>
        	break;
 800058a:	e024      	b.n	80005d6 <display2number+0x16a>
    case 3:
		HAL_GPIO_WritePin(GPIOB, digit_pins_2[1], GPIO_PIN_RESET);
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	2200      	movs	r2, #0
 8000590:	4619      	mov	r1, r3
 8000592:	481e      	ldr	r0, [pc, #120]	; (800060c <display2number+0x1a0>)
 8000594:	f000 fe5a 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, digit_pins_1[1], GPIO_PIN_SET);
 8000598:	2320      	movs	r3, #32
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	481b      	ldr	r0, [pc, #108]	; (800060c <display2number+0x1a0>)
 80005a0:	f000 fe54 	bl	800124c <HAL_GPIO_WritePin>
		display1(digit3);
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <display2number+0x198>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fdcf 	bl	800014c <display1>
        	break;
 80005ae:	e012      	b.n	80005d6 <display2number+0x16a>
    case 4:
		HAL_GPIO_WritePin(GPIOB, digit_pins_1[1], GPIO_PIN_RESET);
 80005b0:	2320      	movs	r3, #32
 80005b2:	2200      	movs	r2, #0
 80005b4:	4619      	mov	r1, r3
 80005b6:	4815      	ldr	r0, [pc, #84]	; (800060c <display2number+0x1a0>)
 80005b8:	f000 fe48 	bl	800124c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, digit_pins_2[1], GPIO_PIN_SET);
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	2201      	movs	r2, #1
 80005c0:	4619      	mov	r1, r3
 80005c2:	4812      	ldr	r0, [pc, #72]	; (800060c <display2number+0x1a0>)
 80005c4:	f000 fe42 	bl	800124c <HAL_GPIO_WritePin>
		display1(digit4);
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <display2number+0x19c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fdbd 	bl	800014c <display1>
        	break;
 80005d2:	e000      	b.n	80005d6 <display2number+0x16a>
    default:
        	break;
 80005d4:	bf00      	nop
    }
    digit_index++;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <display2number+0x1a4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <display2number+0x1a4>)
 80005de:	6013      	str	r3, [r2, #0]
	if (digit_index >4) digit_index=1;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <display2number+0x1a4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	dd02      	ble.n	80005ee <display2number+0x182>
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <display2number+0x1a4>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	66666667 	.word	0x66666667
 80005fc:	20000044 	.word	0x20000044
 8000600:	20000045 	.word	0x20000045
 8000604:	20000046 	.word	0x20000046
 8000608:	20000047 	.word	0x20000047
 800060c:	40010c00 	.word	0x40010c00
 8000610:	20000040 	.word	0x20000040

08000614 <setTimer>:
#define TICK 10
int timer_flag[NUM_TIMERS];  // Timer flags for each timer
int timer_counter[NUM_TIMERS];  // Timer counters for each timer

void setTimer(int timer_id, int duration)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	if (timer_id >= 0 && timer_id < NUM_TIMERS)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db12      	blt.n	800064a <setTimer+0x36>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b09      	cmp	r3, #9
 8000628:	dc0f      	bgt.n	800064a <setTimer+0x36>
	    {
	        timer_counter[timer_id] = duration / TICK;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <setTimer+0x40>)
 800062e:	fb82 1203 	smull	r1, r2, r2, r3
 8000632:	1092      	asrs	r2, r2, #2
 8000634:	17db      	asrs	r3, r3, #31
 8000636:	1ad2      	subs	r2, r2, r3
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <setTimer+0x44>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        timer_flag[timer_id] = 0;
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <setTimer+0x48>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2100      	movs	r1, #0
 8000646:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	66666667 	.word	0x66666667
 8000658:	200000b8 	.word	0x200000b8
 800065c:	20000090 	.word	0x20000090

08000660 <timerRun>:
void timerRun(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_TIMERS; i++)
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	e01c      	b.n	80006a6 <timerRun+0x46>
    {
        if (timer_counter[i] >= 0)
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <timerRun+0x58>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db13      	blt.n	80006a0 <timerRun+0x40>
        {
            timer_counter[i]--;  // Decrease the counter
 8000678:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <timerRun+0x58>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	490d      	ldr	r1, [pc, #52]	; (80006b8 <timerRun+0x58>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if (timer_counter[i] <= 0)
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <timerRun+0x58>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	2b00      	cmp	r3, #0
 8000694:	dc04      	bgt.n	80006a0 <timerRun+0x40>
            {
                timer_flag[i] = 1;  // Timer expired
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <timerRun+0x5c>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2101      	movs	r1, #1
 800069c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_TIMERS; i++)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3301      	adds	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	dddf      	ble.n	800066c <timerRun+0xc>
                // Optional: Trigger a specific action for timer expiration
            }
        }
    }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	200000b8 	.word	0x200000b8
 80006bc:	20000090 	.word	0x20000090

080006c0 <HAL_TIM_PeriodElapsedCallback>:
}
	int cntred = 5, cntye = 3, cntgr = 5;
	int cntred2 = 5, cntye2 = 3, cntgr2 = 5;
	int countabc=0;
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006d0:	f040 8101 	bne.w	80008d6 <HAL_TIM_PeriodElapsedCallback+0x216>
	        timerRun();
 80006d4:	f7ff ffc4 	bl	8000660 <timerRun>

	  	  if (timer_flag[1] == 1){
 80006d8:	4b81      	ldr	r3, [pc, #516]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10b      	bne.n	80006f8 <HAL_TIM_PeriodElapsedCallback+0x38>
	  		display2number(num11, num22);
 80006e0:	4b80      	ldr	r3, [pc, #512]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a80      	ldr	r2, [pc, #512]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff febe 	bl	800046c <display2number>
	  		  setTimer(1,10);
 80006f0:	210a      	movs	r1, #10
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ff8e 	bl	8000614 <setTimer>
	  	  }
	  	if (timer_flag[2] == 1) {
 80006f8:	4b79      	ldr	r3, [pc, #484]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d104      	bne.n	800070a <HAL_TIM_PeriodElapsedCallback+0x4a>

	  				setTimer(2, 500);
 8000700:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000704:	2002      	movs	r0, #2
 8000706:	f7ff ff85 	bl	8000614 <setTimer>
	  			}
	  	if (timer_flag[3] == 1) {
 800070a:	4b75      	ldr	r3, [pc, #468]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	2b01      	cmp	r3, #1
 8000710:	f040 80e1 	bne.w	80008d6 <HAL_TIM_PeriodElapsedCallback+0x216>

			if (cntred >= 0) {
 8000714:	4b75      	ldr	r3, [pc, #468]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db19      	blt.n	8000750 <HAL_TIM_PeriodElapsedCallback+0x90>
				num11=cntred--;
 800071c:	4b73      	ldr	r3, [pc, #460]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	4972      	ldr	r1, [pc, #456]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000724:	600a      	str	r2, [r1, #0]
 8000726:	4a6f      	ldr	r2, [pc, #444]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000728:	6013      	str	r3, [r2, #0]
                HAL_GPIO_WritePin(GPIOB, red2_Pin, GPIO_PIN_SET);   // Bật đèn đỏ
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000730:	486f      	ldr	r0, [pc, #444]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000732:	f000 fd8b 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, yellow2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073c:	486c      	ldr	r0, [pc, #432]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800073e:	f000 fd85 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, green2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000748:	4869      	ldr	r0, [pc, #420]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800074a:	f000 fd7f 	bl	800124c <HAL_GPIO_WritePin>
 800074e:	e03a      	b.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x106>
			}
			else if (cntgr >= 0)  	{
 8000750:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	db19      	blt.n	800078c <HAL_TIM_PeriodElapsedCallback+0xcc>
                HAL_GPIO_WritePin(GPIOB, green2_Pin, GPIO_PIN_SET);  // Bật đèn xanh
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075e:	4864      	ldr	r0, [pc, #400]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000760:	f000 fd74 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, red2_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	4861      	ldr	r0, [pc, #388]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800076c:	f000 fd6e 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, yellow2_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000776:	485e      	ldr	r0, [pc, #376]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000778:	f000 fd68 	bl	800124c <HAL_GPIO_WritePin>

				num11=cntgr--;
 800077c:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	495c      	ldr	r1, [pc, #368]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000784:	600a      	str	r2, [r1, #0]
 8000786:	4a57      	ldr	r2, [pc, #348]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e01c      	b.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x106>
			}
			else if (cntye >= 0) 	{
 800078c:	4b5a      	ldr	r3, [pc, #360]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db18      	blt.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x106>
				num11=cntye--;
 8000794:	4b58      	ldr	r3, [pc, #352]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	4957      	ldr	r1, [pc, #348]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800079c:	600a      	str	r2, [r1, #0]
 800079e:	4a51      	ldr	r2, [pc, #324]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80007a0:	6013      	str	r3, [r2, #0]
                HAL_GPIO_WritePin(GPIOB, yellow2_Pin, GPIO_PIN_SET); // Bật đèn vàng
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a8:	4851      	ldr	r0, [pc, #324]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80007aa:	f000 fd4f 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, red2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	484e      	ldr	r0, [pc, #312]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80007b6:	f000 fd49 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, green2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c0:	484b      	ldr	r0, [pc, #300]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80007c2:	f000 fd43 	bl	800124c <HAL_GPIO_WritePin>

			}

			if (cntgr2 >= 0)  	{
 80007c6:	4b4d      	ldr	r3, [pc, #308]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db19      	blt.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x142>
				num22=cntgr2--;
 80007ce:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	4949      	ldr	r1, [pc, #292]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80007d6:	600a      	str	r2, [r1, #0]
 80007d8:	4a43      	ldr	r2, [pc, #268]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80007da:	6013      	str	r3, [r2, #0]
                HAL_GPIO_WritePin(GPIOB, green1_Pin, GPIO_PIN_SET);  // Bật đèn xanh
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e2:	4843      	ldr	r0, [pc, #268]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80007e4:	f000 fd32 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, red1_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ee:	4840      	ldr	r0, [pc, #256]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80007f0:	f000 fd2c 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, yellow1_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007fa:	483d      	ldr	r0, [pc, #244]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80007fc:	f000 fd26 	bl	800124c <HAL_GPIO_WritePin>
 8000800:	e03a      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			}
			else if (cntye2 >= 0) 	{
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db19      	blt.n	800083e <HAL_TIM_PeriodElapsedCallback+0x17e>
				num22=cntye2--;
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	1e5a      	subs	r2, r3, #1
 8000810:	493b      	ldr	r1, [pc, #236]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000812:	600a      	str	r2, [r1, #0]
 8000814:	4a34      	ldr	r2, [pc, #208]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000816:	6013      	str	r3, [r2, #0]
                HAL_GPIO_WritePin(GPIOB, yellow1_Pin, GPIO_PIN_SET); // Bật đèn vàng
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	4834      	ldr	r0, [pc, #208]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000820:	f000 fd14 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, red1_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082a:	4831      	ldr	r0, [pc, #196]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800082c:	f000 fd0e 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, green1_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000836:	482e      	ldr	r0, [pc, #184]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000838:	f000 fd08 	bl	800124c <HAL_GPIO_WritePin>
 800083c:	e01c      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			}
			else if (cntred2 >= 0) 	{
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db18      	blt.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x1b8>
				num22=cntred2--;
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	492d      	ldr	r1, [pc, #180]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800084e:	600a      	str	r2, [r1, #0]
 8000850:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000852:	6013      	str	r3, [r2, #0]
                HAL_GPIO_WritePin(GPIOB, red1_Pin, GPIO_PIN_SET);   // Bật đèn đỏ
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085a:	4825      	ldr	r0, [pc, #148]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800085c:	f000 fcf6 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, yellow1_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000868:	f000 fcf0 	bl	800124c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, green1_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000872:	481f      	ldr	r0, [pc, #124]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000874:	f000 fcea 	bl	800124c <HAL_GPIO_WritePin>
			}

			if (cntred2 < 0 && cntgr2 < 0 && cntye2 < 0) {
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	da10      	bge.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	da0c      	bge.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	da08      	bge.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
				cntred2 = 5;
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000892:	2205      	movs	r2, #5
 8000894:	601a      	str	r2, [r3, #0]
				cntgr2 = 5;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000898:	2205      	movs	r2, #5
 800089a:	601a      	str	r2, [r3, #0]
				cntye2 = 3;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800089e:	2203      	movs	r2, #3
 80008a0:	601a      	str	r2, [r3, #0]
			}

			if (cntred < 0 && cntgr < 0 && cntye < 0) {
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	da10      	bge.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x20c>
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	da0c      	bge.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x20c>
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da08      	bge.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x20c>
				cntred = 5;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80008bc:	2205      	movs	r2, #5
 80008be:	601a      	str	r2, [r3, #0]
				cntgr = 5;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80008c2:	2205      	movs	r2, #5
 80008c4:	601a      	str	r2, [r3, #0]
				cntye = 3;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80008c8:	2203      	movs	r2, #3
 80008ca:	601a      	str	r2, [r3, #0]
			}

			setTimer(3, 500);
 80008cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008d0:	2003      	movs	r0, #3
 80008d2:	f7ff fe9f 	bl	8000614 <setTimer>
		}

	    }
	}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000090 	.word	0x20000090
 80008e4:	200000e0 	.word	0x200000e0
 80008e8:	200000e4 	.word	0x200000e4
 80008ec:	20000000 	.word	0x20000000
 80008f0:	40010c00 	.word	0x40010c00
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004
 80008fc:	20000014 	.word	0x20000014
 8000900:	20000010 	.word	0x20000010
 8000904:	2000000c 	.word	0x2000000c

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090c:	f000 f9b2 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000910:	f000 f81c 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f000 f8a2 	bl	8000a5c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000918:	f000 f854 	bl	80009c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800091c:	480a      	ldr	r0, [pc, #40]	; (8000948 <main+0x40>)
 800091e:	f001 f8db 	bl	8001ad8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1,10);
 8000922:	210a      	movs	r1, #10
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fe75 	bl	8000614 <setTimer>
  setTimer(2,1000);
 800092a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fe70 	bl	8000614 <setTimer>
  setTimer(3,1000);
 8000934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000938:	2003      	movs	r0, #3
 800093a:	f7ff fe6b 	bl	8000614 <setTimer>
  setTimer(4,250);
 800093e:	21fa      	movs	r1, #250	; 0xfa
 8000940:	2004      	movs	r0, #4
 8000942:	f7ff fe67 	bl	8000614 <setTimer>
 // int abc=11;
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x3e>
 8000948:	20000048 	.word	0x20000048

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b090      	sub	sp, #64	; 0x40
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	2228      	movs	r2, #40	; 0x28
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f001 fc6c 	bl	8002238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000972:	2301      	movs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000976:	2310      	movs	r3, #16
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 0318 	add.w	r3, r7, #24
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fc7a 	bl	800127c <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800098e:	f000 f8c7 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fee8 	bl	8001780 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f8b3 	bl	8000b20 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3740      	adds	r7, #64	; 0x40
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009f8:	2209      	movs	r2, #9
 80009fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_TIM2_Init+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a0a:	f001 f815 	bl	8001a38 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a14:	f000 f884 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a26:	f001 f993 	bl	8001d50 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a30:	f000 f876 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_TIM2_Init+0x94>)
 8000a42:	f001 fb6b 	bl	800211c <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 f868 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000048 	.word	0x20000048

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <MX_GPIO_Init+0xb8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <MX_GPIO_Init+0xb8>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <MX_GPIO_Init+0xb8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <MX_GPIO_Init+0xb8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <MX_GPIO_Init+0xb8>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_GPIO_Init+0xb8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <MX_GPIO_Init+0xbc>)
 8000aa8:	f000 fbd0 	bl	800124c <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_7_Pin
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000aac:	2200      	movs	r2, #0
 8000aae:	f64f 4178 	movw	r1, #64632	; 0xfc78
 8000ab2:	481a      	ldr	r0, [pc, #104]	; (8000b1c <MX_GPIO_Init+0xc0>)
 8000ab4:	f000 fbca 	bl	800124c <HAL_GPIO_WritePin>
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG_7_Pin
                           PA8 */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000ab8:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000abc:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_7_Pin
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_GPIO_Init+0xbc>)
 8000ad2:	f000 fa3f 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_GPIO_Init+0xc0>)
 8000aea:	f000 fa33 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin red2_Pin
                           yellow2_Pin green2_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000aee:	f64f 4378 	movw	r3, #64632	; 0xfc78
 8000af2:	60bb      	str	r3, [r7, #8]
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2302      	movs	r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_GPIO_Init+0xc0>)
 8000b08:	f000 fa24 	bl	8000f54 <HAL_GPIO_Init>

}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_MspInit+0x40>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_MspInit+0x40>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_MspInit+0x40>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_MspInit+0x40>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_MspInit+0x40>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_MspInit+0x40>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000

08000b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b80:	d113      	bne.n	8000baa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_TIM_Base_MspInit+0x44>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <HAL_TIM_Base_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_TIM_Base_MspInit+0x44>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	201c      	movs	r0, #28
 8000ba0:	f000 f9a1 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ba4:	201c      	movs	r0, #28
 8000ba6:	f000 f9ba 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 f87f 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM2_IRQHandler+0x10>)
 8000c0e:	f000 ffaf 	bl	8001b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000048 	.word	0x20000048

08000c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c28:	f7ff fff8 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c2e:	490c      	ldr	r1, [pc, #48]	; (8000c60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c30:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c44:	4c09      	ldr	r4, [pc, #36]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f001 facd 	bl	80021f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c56:	f7ff fe57 	bl	8000908 <main>
  bx lr
 8000c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000c64:	0800228c 	.word	0x0800228c
  ldr r2, =_sbss
 8000c68:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000c6c:	200000ec 	.word	0x200000ec

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f923 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff ff4c 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f93b 	bl	8000f3a <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f903 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000018 	.word	0x20000018
 8000cf8:	20000020 	.word	0x20000020
 8000cfc:	2000001c 	.word	0x2000001c

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_IncTick+0x20>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000020 	.word	0x20000020
 8000d20:	200000e8 	.word	0x200000e8

08000d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	200000e8 	.word	0x200000e8

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4906      	ldr	r1, [pc, #24]	; (8000dd0 <__NVIC_EnableIRQ+0x34>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff90 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff2d 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff42 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff35 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b08b      	sub	sp, #44	; 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e161      	b.n	800122c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8150 	bne.w	8001226 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a97      	ldr	r2, [pc, #604]	; (80011e8 <HAL_GPIO_Init+0x294>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d05e      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f90:	4a95      	ldr	r2, [pc, #596]	; (80011e8 <HAL_GPIO_Init+0x294>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d875      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000f96:	4a95      	ldr	r2, [pc, #596]	; (80011ec <HAL_GPIO_Init+0x298>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d058      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f9c:	4a93      	ldr	r2, [pc, #588]	; (80011ec <HAL_GPIO_Init+0x298>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d86f      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a93      	ldr	r2, [pc, #588]	; (80011f0 <HAL_GPIO_Init+0x29c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d052      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fa8:	4a91      	ldr	r2, [pc, #580]	; (80011f0 <HAL_GPIO_Init+0x29c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d869      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fae:	4a91      	ldr	r2, [pc, #580]	; (80011f4 <HAL_GPIO_Init+0x2a0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d04c      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fb4:	4a8f      	ldr	r2, [pc, #572]	; (80011f4 <HAL_GPIO_Init+0x2a0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d863      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fba:	4a8f      	ldr	r2, [pc, #572]	; (80011f8 <HAL_GPIO_Init+0x2a4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d046      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a8d      	ldr	r2, [pc, #564]	; (80011f8 <HAL_GPIO_Init+0x2a4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d85d      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fc6:	2b12      	cmp	r3, #18
 8000fc8:	d82a      	bhi.n	8001020 <HAL_GPIO_Init+0xcc>
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d859      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fce:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <HAL_GPIO_Init+0x80>)
 8000fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	08001029 	.word	0x08001029
 8000fdc:	0800103b 	.word	0x0800103b
 8000fe0:	0800107d 	.word	0x0800107d
 8000fe4:	08001083 	.word	0x08001083
 8000fe8:	08001083 	.word	0x08001083
 8000fec:	08001083 	.word	0x08001083
 8000ff0:	08001083 	.word	0x08001083
 8000ff4:	08001083 	.word	0x08001083
 8000ff8:	08001083 	.word	0x08001083
 8000ffc:	08001083 	.word	0x08001083
 8001000:	08001083 	.word	0x08001083
 8001004:	08001083 	.word	0x08001083
 8001008:	08001083 	.word	0x08001083
 800100c:	08001083 	.word	0x08001083
 8001010:	08001083 	.word	0x08001083
 8001014:	08001083 	.word	0x08001083
 8001018:	08001031 	.word	0x08001031
 800101c:	08001045 	.word	0x08001045
 8001020:	4a76      	ldr	r2, [pc, #472]	; (80011fc <HAL_GPIO_Init+0x2a8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001026:	e02c      	b.n	8001082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e029      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	3304      	adds	r3, #4
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e024      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	3308      	adds	r3, #8
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e01f      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	330c      	adds	r3, #12
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e01a      	b.n	8001084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001056:	2304      	movs	r3, #4
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e013      	b.n	8001084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	611a      	str	r2, [r3, #16]
          break;
 800106e:	e009      	b.n	8001084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	615a      	str	r2, [r3, #20]
          break;
 800107a:	e003      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e000      	b.n	8001084 <HAL_GPIO_Init+0x130>
          break;
 8001082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d801      	bhi.n	800108e <HAL_GPIO_Init+0x13a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	e001      	b.n	8001092 <HAL_GPIO_Init+0x13e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3304      	adds	r3, #4
 8001092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d802      	bhi.n	80010a0 <HAL_GPIO_Init+0x14c>
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x152>
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	3b08      	subs	r3, #8
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	210f      	movs	r1, #15
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	401a      	ands	r2, r3
 80010b8:	6a39      	ldr	r1, [r7, #32]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80a9 	beq.w	8001226 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d4:	4b4a      	ldr	r3, [pc, #296]	; (8001200 <HAL_GPIO_Init+0x2ac>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a49      	ldr	r2, [pc, #292]	; (8001200 <HAL_GPIO_Init+0x2ac>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_GPIO_Init+0x2ac>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <HAL_GPIO_Init+0x2b0>)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3d      	ldr	r2, [pc, #244]	; (8001208 <HAL_GPIO_Init+0x2b4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1e0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a3c      	ldr	r2, [pc, #240]	; (800120c <HAL_GPIO_Init+0x2b8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1dc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a3b      	ldr	r2, [pc, #236]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1d8>
 8001128:	2302      	movs	r3, #2
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 800112c:	2303      	movs	r3, #3
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 8001134:	2300      	movs	r3, #0
 8001136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001146:	492f      	ldr	r1, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x2b0>)
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	492b      	ldr	r1, [pc, #172]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	608b      	str	r3, [r1, #8]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	4927      	ldr	r1, [pc, #156]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 8001178:	4013      	ands	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	4921      	ldr	r1, [pc, #132]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	60cb      	str	r3, [r1, #12]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	491d      	ldr	r1, [pc, #116]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4917      	ldr	r1, [pc, #92]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4913      	ldr	r1, [pc, #76]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01f      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	490d      	ldr	r1, [pc, #52]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e01f      	b.n	8001226 <HAL_GPIO_Init+0x2d2>
 80011e6:	bf00      	nop
 80011e8:	10320000 	.word	0x10320000
 80011ec:	10310000 	.word	0x10310000
 80011f0:	10220000 	.word	0x10220000
 80011f4:	10210000 	.word	0x10210000
 80011f8:	10120000 	.word	0x10120000
 80011fc:	10110000 	.word	0x10110000
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00
 8001210:	40011000 	.word	0x40011000
 8001214:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_GPIO_Init+0x2f4>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	43db      	mvns	r3, r3
 8001220:	4909      	ldr	r1, [pc, #36]	; (8001248 <HAL_GPIO_Init+0x2f4>)
 8001222:	4013      	ands	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	3301      	adds	r3, #1
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	fa22 f303 	lsr.w	r3, r2, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	f47f ae96 	bne.w	8000f68 <HAL_GPIO_Init+0x14>
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	372c      	adds	r7, #44	; 0x2c
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	611a      	str	r2, [r3, #16]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e272      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8087 	beq.w	80013aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800129c:	4b92      	ldr	r3, [pc, #584]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d00c      	beq.n	80012c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a8:	4b8f      	ldr	r3, [pc, #572]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d112      	bne.n	80012da <HAL_RCC_OscConfig+0x5e>
 80012b4:	4b8c      	ldr	r3, [pc, #560]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d10b      	bne.n	80012da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	4b89      	ldr	r3, [pc, #548]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d06c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x12c>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d168      	bne.n	80013a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e24c      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x76>
 80012e4:	4b80      	ldr	r3, [pc, #512]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a7f      	ldr	r2, [pc, #508]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e02e      	b.n	8001350 <HAL_RCC_OscConfig+0xd4>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x98>
 80012fa:	4b7b      	ldr	r3, [pc, #492]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a7a      	ldr	r2, [pc, #488]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b78      	ldr	r3, [pc, #480]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a77      	ldr	r2, [pc, #476]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800130c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e01d      	b.n	8001350 <HAL_RCC_OscConfig+0xd4>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0xbc>
 800131e:	4b72      	ldr	r3, [pc, #456]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a71      	ldr	r2, [pc, #452]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b6f      	ldr	r3, [pc, #444]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6e      	ldr	r2, [pc, #440]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0xd4>
 8001338:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a6a      	ldr	r2, [pc, #424]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800133e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a67      	ldr	r2, [pc, #412]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fce4 	bl	8000d24 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fce0 	bl	8000d24 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e200      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0xe4>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcd0 	bl	8000d24 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fccc 	bl	8000d24 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1ec      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x10c>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d063      	beq.n	800147e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013b6:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013c2:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d11c      	bne.n	8001408 <HAL_RCC_OscConfig+0x18c>
 80013ce:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d116      	bne.n	8001408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x176>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e1c0      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4939      	ldr	r1, [pc, #228]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	e03a      	b.n	800147e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_RCC_OscConfig+0x270>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fc85 	bl	8000d24 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fc81 	bl	8000d24 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1a1      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4927      	ldr	r1, [pc, #156]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_RCC_OscConfig+0x270>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fc64 	bl	8000d24 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fc60 	bl	8000d24 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e180      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d03a      	beq.n	8001500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d019      	beq.n	80014c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_RCC_OscConfig+0x274>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff fc44 	bl	8000d24 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc40 	bl	8000d24 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e160      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 fa9c 	bl	80019fc <RCC_Delay>
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_RCC_OscConfig+0x274>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fc2a 	bl	8000d24 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d2:	e00f      	b.n	80014f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fc26 	bl	8000d24 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d908      	bls.n	80014f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e146      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	42420000 	.word	0x42420000
 80014f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1e9      	bne.n	80014d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a6 	beq.w	800165a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4b8b      	ldr	r3, [pc, #556]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10d      	bne.n	800153a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a87      	ldr	r2, [pc, #540]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b85      	ldr	r3, [pc, #532]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b82      	ldr	r3, [pc, #520]	; (8001744 <HAL_RCC_OscConfig+0x4c8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b7f      	ldr	r3, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x4c8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7e      	ldr	r2, [pc, #504]	; (8001744 <HAL_RCC_OscConfig+0x4c8>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fbe7 	bl	8000d24 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fbe3 	bl	8000d24 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b64      	cmp	r3, #100	; 0x64
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e103      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b75      	ldr	r3, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x4c8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x312>
 8001580:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4a6e      	ldr	r2, [pc, #440]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6213      	str	r3, [r2, #32]
 800158c:	e02d      	b.n	80015ea <HAL_RCC_OscConfig+0x36e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x334>
 8001596:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a69      	ldr	r2, [pc, #420]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	4b67      	ldr	r3, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a66      	ldr	r2, [pc, #408]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	6213      	str	r3, [r2, #32]
 80015ae:	e01c      	b.n	80015ea <HAL_RCC_OscConfig+0x36e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d10c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x356>
 80015b8:	4b61      	ldr	r3, [pc, #388]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4a60      	ldr	r2, [pc, #384]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6213      	str	r3, [r2, #32]
 80015c4:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4a5d      	ldr	r2, [pc, #372]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6213      	str	r3, [r2, #32]
 80015d0:	e00b      	b.n	80015ea <HAL_RCC_OscConfig+0x36e>
 80015d2:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6213      	str	r3, [r2, #32]
 80015de:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d015      	beq.n	800161e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fb97 	bl	8000d24 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fb93 	bl	8000d24 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0b1      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001610:	4b4b      	ldr	r3, [pc, #300]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ee      	beq.n	80015fa <HAL_RCC_OscConfig+0x37e>
 800161c:	e014      	b.n	8001648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fb81 	bl	8000d24 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fb7d 	bl	8000d24 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e09b      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163c:	4b40      	ldr	r3, [pc, #256]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ee      	bne.n	8001626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d105      	bne.n	800165a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a3b      	ldr	r2, [pc, #236]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8087 	beq.w	8001772 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d061      	beq.n	8001734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d146      	bne.n	8001706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_RCC_OscConfig+0x4cc>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fb51 	bl	8000d24 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fb4d 	bl	8000d24 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e06d      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ac:	d108      	bne.n	80016c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4921      	ldr	r1, [pc, #132]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a19      	ldr	r1, [r3, #32]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	430b      	orrs	r3, r1
 80016d2:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x4cc>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb21 	bl	8000d24 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fb1d 	bl	8000d24 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e03d      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x46a>
 8001704:	e035      	b.n	8001772 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x4cc>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb0a 	bl	8000d24 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fb06 	bl	8000d24 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e026      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x498>
 8001732:	e01e      	b.n	8001772 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e019      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
 8001740:	40021000 	.word	0x40021000
 8001744:	40007000 	.word	0x40007000
 8001748:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x500>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	429a      	cmp	r2, r3
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0d0      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d910      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b67      	ldr	r3, [pc, #412]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4965      	ldr	r1, [pc, #404]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0b8      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017dc:	4b59      	ldr	r3, [pc, #356]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a58      	ldr	r2, [pc, #352]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001800:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	494d      	ldr	r1, [pc, #308]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d040      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d115      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e07f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e073      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06b      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4936      	ldr	r1, [pc, #216]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff fa58 	bl	8000d24 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff fa54 	bl	8000d24 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e053      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d210      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 0207 	bic.w	r2, r3, #7
 80018b6:	4922      	ldr	r1, [pc, #136]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e032      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4916      	ldr	r1, [pc, #88]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800190e:	f000 f821 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8001912:	4602      	mov	r2, r0
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	490a      	ldr	r1, [pc, #40]	; (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	5ccb      	ldrb	r3, [r1, r3]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_RCC_ClockConfig+0x1cc>)
 8001928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1d0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f9b6 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40022000 	.word	0x40022000
 8001944:	40021000 	.word	0x40021000
 8001948:	08002260 	.word	0x08002260
 800194c:	20000018 	.word	0x20000018
 8001950:	2000001c 	.word	0x2000001c

08001954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b04      	cmp	r3, #4
 800197c:	d002      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x30>
 800197e:	2b08      	cmp	r3, #8
 8001980:	d003      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x36>
 8001982:	e027      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001986:	613b      	str	r3, [r7, #16]
      break;
 8001988:	e027      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	0c9b      	lsrs	r3, r3, #18
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d010      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	0c5b      	lsrs	r3, r3, #17
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_RCC_GetSysClockFreq+0x98>)
 80019b6:	fb03 f202 	mul.w	r2, r3, r2
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e004      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	613b      	str	r3, [r7, #16]
      break;
 80019d2:	e002      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_RCC_GetSysClockFreq+0x98>)
 80019d6:	613b      	str	r3, [r7, #16]
      break;
 80019d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019da:	693b      	ldr	r3, [r7, #16]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	08002270 	.word	0x08002270
 80019f4:	08002280 	.word	0x08002280
 80019f8:	003d0900 	.word	0x003d0900

080019fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <RCC_Delay+0x34>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <RCC_Delay+0x38>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0a5b      	lsrs	r3, r3, #9
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a18:	bf00      	nop
  }
  while (Delay --);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	60fa      	str	r2, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f9      	bne.n	8001a18 <RCC_Delay+0x1c>
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000018 	.word	0x20000018
 8001a34:	10624dd3 	.word	0x10624dd3

08001a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e041      	b.n	8001ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff f886 	bl	8000b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3304      	adds	r3, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f000 fa56 	bl	8001f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d001      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e035      	b.n	8001b5c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <HAL_TIM_Base_Start_IT+0x90>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_TIM_Base_Start_IT+0x4e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1a:	d004      	beq.n	8001b26 <HAL_TIM_Base_Start_IT+0x4e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_TIM_Base_Start_IT+0x94>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d111      	bne.n	8001b4a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b06      	cmp	r3, #6
 8001b36:	d010      	beq.n	8001b5a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b48:	e007      	b.n	8001b5a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40000400 	.word	0x40000400

08001b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d020      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01b      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0202 	mvn.w	r2, #2
 8001ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f998 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f98b 	bl	8001ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f99a 	bl	8001f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d020      	beq.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0204 	mvn.w	r2, #4
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f972 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f965 	bl	8001ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f974 	bl	8001f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d020      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01b      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0208 	mvn.w	r2, #8
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f94c 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f93f 	bl	8001ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f94e 	bl	8001f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d020      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01b      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0210 	mvn.w	r2, #16
 8001c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f926 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f919 	bl	8001ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f928 	bl	8001f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00c      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0201 	mvn.w	r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fcf2 	bl	80006c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00c      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fa6f 	bl	80021de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8f8 	bl	8001f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00c      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0220 	mvn.w	r2, #32
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fa42 	bl	80021cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_TIM_ConfigClockSource+0x1c>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e0b4      	b.n	8001ed6 <HAL_TIM_ConfigClockSource+0x186>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da4:	d03e      	beq.n	8001e24 <HAL_TIM_ConfigClockSource+0xd4>
 8001da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001daa:	f200 8087 	bhi.w	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
 8001dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db2:	f000 8086 	beq.w	8001ec2 <HAL_TIM_ConfigClockSource+0x172>
 8001db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dba:	d87f      	bhi.n	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
 8001dbc:	2b70      	cmp	r3, #112	; 0x70
 8001dbe:	d01a      	beq.n	8001df6 <HAL_TIM_ConfigClockSource+0xa6>
 8001dc0:	2b70      	cmp	r3, #112	; 0x70
 8001dc2:	d87b      	bhi.n	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
 8001dc4:	2b60      	cmp	r3, #96	; 0x60
 8001dc6:	d050      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x11a>
 8001dc8:	2b60      	cmp	r3, #96	; 0x60
 8001dca:	d877      	bhi.n	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
 8001dcc:	2b50      	cmp	r3, #80	; 0x50
 8001dce:	d03c      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0xfa>
 8001dd0:	2b50      	cmp	r3, #80	; 0x50
 8001dd2:	d873      	bhi.n	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d058      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0x13a>
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d86f      	bhi.n	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
 8001ddc:	2b30      	cmp	r3, #48	; 0x30
 8001dde:	d064      	beq.n	8001eaa <HAL_TIM_ConfigClockSource+0x15a>
 8001de0:	2b30      	cmp	r3, #48	; 0x30
 8001de2:	d86b      	bhi.n	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d060      	beq.n	8001eaa <HAL_TIM_ConfigClockSource+0x15a>
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d867      	bhi.n	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d05c      	beq.n	8001eaa <HAL_TIM_ConfigClockSource+0x15a>
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d05a      	beq.n	8001eaa <HAL_TIM_ConfigClockSource+0x15a>
 8001df4:	e062      	b.n	8001ebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f000 f96a 	bl	80020de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	609a      	str	r2, [r3, #8]
      break;
 8001e22:	e04f      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6899      	ldr	r1, [r3, #8]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f000 f953 	bl	80020de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e46:	609a      	str	r2, [r3, #8]
      break;
 8001e48:	e03c      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f000 f8ca 	bl	8001ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2150      	movs	r1, #80	; 0x50
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f921 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001e68:	e02c      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f000 f8e8 	bl	800204c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2160      	movs	r1, #96	; 0x60
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f911 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001e88:	e01c      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f000 f8aa 	bl	8001ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f901 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001ea8:	e00c      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f000 f8f8 	bl	80020aa <TIM_ITRx_SetConfig>
      break;
 8001eba:	e003      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <TIM_Base_SetConfig+0xc0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0x28>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x28>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <TIM_Base_SetConfig+0xc4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <TIM_Base_SetConfig+0xc0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0x52>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0x52>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <TIM_Base_SetConfig+0xc4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <TIM_Base_SetConfig+0xc0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d103      	bne.n	8001fc0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f023 0201 	bic.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40012c00 	.word	0x40012c00
 8001fec:	40000400 	.word	0x40000400

08001ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f023 0201 	bic.w	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f023 030a 	bic.w	r3, r3, #10
 800202c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	621a      	str	r2, [r3, #32]
}
 8002042:	bf00      	nop
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	f023 0210 	bic.w	r2, r3, #16
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	031b      	lsls	r3, r3, #12
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002088:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	621a      	str	r2, [r3, #32]
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f043 0307 	orr.w	r3, r3, #7
 80020cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	609a      	str	r2, [r3, #8]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020de:	b480      	push	{r7}
 80020e0:	b087      	sub	sp, #28
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	021a      	lsls	r2, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	431a      	orrs	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4313      	orrs	r3, r2
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	609a      	str	r2, [r3, #8]
}
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002130:	2302      	movs	r3, #2
 8002132:	e041      	b.n	80021b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d004      	beq.n	800218c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10c      	bne.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002192:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	4313      	orrs	r3, r2
 800219c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40012c00 	.word	0x40012c00
 80021c8:	40000400 	.word	0x40000400

080021cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <__libc_init_array>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	2600      	movs	r6, #0
 80021f4:	4d0c      	ldr	r5, [pc, #48]	; (8002228 <__libc_init_array+0x38>)
 80021f6:	4c0d      	ldr	r4, [pc, #52]	; (800222c <__libc_init_array+0x3c>)
 80021f8:	1b64      	subs	r4, r4, r5
 80021fa:	10a4      	asrs	r4, r4, #2
 80021fc:	42a6      	cmp	r6, r4
 80021fe:	d109      	bne.n	8002214 <__libc_init_array+0x24>
 8002200:	f000 f822 	bl	8002248 <_init>
 8002204:	2600      	movs	r6, #0
 8002206:	4d0a      	ldr	r5, [pc, #40]	; (8002230 <__libc_init_array+0x40>)
 8002208:	4c0a      	ldr	r4, [pc, #40]	; (8002234 <__libc_init_array+0x44>)
 800220a:	1b64      	subs	r4, r4, r5
 800220c:	10a4      	asrs	r4, r4, #2
 800220e:	42a6      	cmp	r6, r4
 8002210:	d105      	bne.n	800221e <__libc_init_array+0x2e>
 8002212:	bd70      	pop	{r4, r5, r6, pc}
 8002214:	f855 3b04 	ldr.w	r3, [r5], #4
 8002218:	4798      	blx	r3
 800221a:	3601      	adds	r6, #1
 800221c:	e7ee      	b.n	80021fc <__libc_init_array+0xc>
 800221e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002222:	4798      	blx	r3
 8002224:	3601      	adds	r6, #1
 8002226:	e7f2      	b.n	800220e <__libc_init_array+0x1e>
 8002228:	08002284 	.word	0x08002284
 800222c:	08002284 	.word	0x08002284
 8002230:	08002284 	.word	0x08002284
 8002234:	08002288 	.word	0x08002288

08002238 <memset>:
 8002238:	4603      	mov	r3, r0
 800223a:	4402      	add	r2, r0
 800223c:	4293      	cmp	r3, r2
 800223e:	d100      	bne.n	8002242 <memset+0xa>
 8002240:	4770      	bx	lr
 8002242:	f803 1b01 	strb.w	r1, [r3], #1
 8002246:	e7f9      	b.n	800223c <memset+0x4>

08002248 <_init>:
 8002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224a:	bf00      	nop
 800224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224e:	bc08      	pop	{r3}
 8002250:	469e      	mov	lr, r3
 8002252:	4770      	bx	lr

08002254 <_fini>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr
